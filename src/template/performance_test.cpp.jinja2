{#                        #}
{# |_|  _   _.  _|  _  ._ #}
{# | | (/_ (_| (_| (/_ |  #}
{#                        #}

#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <omp.h>

{#  _                    _     __               #}
{# / \ ._   _  ._  |\/| |_)   (_ _|_     |_   _ #}
{# \_/ |_) (/_ | | |  | |     __) |_ |_| |_) _> #}
{#     |                                        #}

{% if single("teams") or single("parallel") or multiple_devices %}
#ifdef _OPENMP
#else

{% if single("teams") %}
int omp_get_num_teams() {return 1;}
void omp_set_num_teams(int _) { (void)_;}
{% endif %}

{% if single("parallel") %}
int omp_get_num_threads() {return 1;}
{% endif %}

{% if multiple_devices %}
int omp_get_num_devices() {return 1;}
{% endif %}
#endif
{% endif %}

{#  _                                         _                         #}
{# /   _  ._ _  ._   _. ._ _. o  _  _  ._    |_    ._   _ _|_ o  _  ._  #}
{# \_ (_) | | | |_) (_| | (_| | _> (_) | |   | |_| | | (_  |_ | (_) | | #}
{#              |                                                       #}


{% if test_type == 'empty_function_latency' %}
void empty_function() { }
{% endif %}

{# _____         _    ______                _   _             #}
{#|_   _|       | |   |  ___|              | | (_)            #}
{#  | | ___  ___| |_  | |_ _   _ _ __   ___| |_ _  ___  _ __  #}
{#  | |/ _ \/ __| __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \ #}
{#  | |  __/\__ \ |_  | | | |_| | | | | (__| |_| | (_) | | | |#}
{#  \_/\___||___/\__| \_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|#}
{#                                                            #}

void test_{{name}}() {

{#                               _                                   #}
{# \  / _. ._ o  _. |_  |  _    | \  _   _ |  _. ._ _. _|_ o  _  ._  #}
{#  \/ (_| |  | (_| |_) | (/_   |_/ (/_ (_ | (_| | (_|  |_ | (_) | | #}
{#                                                                   #}

{# Sets up loop counters with name convention N0, N1 for loops used within pragma #}
{% for loop_constructs in regions_associated_loop %}
    {% for loop_  in loop_constructs %}
  const int {{ loop_.N }} { {{ loop_.v }} };
    {% endfor %}
{% endfor %}
 
{% if single("teams") %}
  omp_set_num_teams({{loop_tripcount}});
{% endif %}

{% if test_type == 'get_thread_num_latency' %}
  int localid;
{% elif test_type == 'matrix_decomposition' %}
  {{T}} mat[{{matrix_size}}][{{matrix_size}}] = {
    {% for row in range(matrix_size) %}
    {% if data_type == 'int' %}
    { {% for col in range(matrix_size) %}{% if loop.first %}{{ range(1,100) | random }}{% else %}, {{range(1,100) | random}}{%endif%}{% endfor %} } {% if not loop.last %},{%endif%}
    {% else %}
    { {% for col in range(matrix_size) %}{% if loop.first %}{{range(1,100) | random / 100}}{% else %}, {{range(1,100) | random / 100}}{%endif%}{% endfor %} } {% if not loop.last %},{%endif%}
    {% endif %}
    {% endfor %}
  };
{% endif %}

{# start the timer #}
  double start_timer = omp_get_wtime();

{#                      _                          #}
{# |   _   _  ._   _   |_) ._ _  |  _   _       _  #}
{# |_ (_) (_) |_) _>   |   | (_) | (_) (_| |_| (/_ #}
{#            |                         _|         #}
{% for region, loop_constructs, region_additional_pragma, counter in zip(l_nested_constructs_ironed_out, regions_associated_loop, regions_additional_pragma,regions_counter) %}
{% filter indent(width=2*loop.index) %}
   {# In the case of 'local' test, we use only one counter in the outermost enclosing scope #} 
   {% if loop.first %}
{{T}} {{counter}}{};
   {% endif %}
   {% if enter_data and loop.first %}
#pragma omp target enter data map(to: {{counter}})
   {% endif %}
   {% if test_type == 'get_thread_num_latency' and loop.last %}
     {% for pragma, additional_pragma in zip(region, region_additional_pragma) %}
#pragma omp {{pragma}} {{additional_pragma}} {% if loop.last %} private(localid) {% endif %}
     {% endfor %}
   {% else %}
     {% for pragma, additional_pragma in zip(region, region_additional_pragma) %}
#pragma omp {{pragma}} {{additional_pragma}}
     {% endfor %}
   {% endif %}

   {% for loop_  in loop_constructs %}
for (int {{loop_.i}} = 0 ; {{loop_.i}} < {{loop_.N}} ; {{loop_.i}}++ )
   {% endfor %}
{
{% endfilter %}
{% endfor %}

{#                      _                         #}
{# |   _   _  ._   _   |_ ._  o |  _   _       _  #}
{# |_ (_) (_) |_) _>   |_ |_) | | (_) (_| |_| (/_ #}
{#            |           |            _|         #}

{% for region, increments in zip(l_nested_constructs_ironed_out,regions_increment) | reverse %}
   {% filter indent(width=2*(loop.revindex+1)) %}
      {% if loop.first %}  {#   THIS IS WHERE THE FUNCTION CALLS ARE #}
        {# launch commands go in here #}
for (int repeat_call = 0; repeat_call < {{ repeatcount }}; repeat_call++)
{
{# TESTS HERE #}


        {% if test_type == 'empty_function_latency' %}
  empty_function();
        {% elif test_type == 'get_thread_num_latency' %}
  localid = omp_get_thread_num();
        {% elif test_type == 'matrix_decomposition' %}
            {% for row in range(matrix_size) %}
                {% for col in range(matrix_size) %}
  {{T}} n_{{row}}_{{col}} = mat[{{row}}][{{col}}];
                {% endfor %}
            {% endfor %}
        {% endif %}


{# END TESTS #}
}
      {% endif %}

   {% endfilter %}

   {# The closing braket are indented by one less level #}
   {% filter indent(width=2*loop.revindex) %}
}
   {% endfilter %}
{% endfor %}

{# end the timer #}
  double end_timer = omp_get_wtime();
  double elapsed_time = end_timer - start_timer;

{% if enter_data %}
  #pragma omp target exit data map(from: {{regions_counter[0]}})
{% endif %}

{#                                   #}
{# \  / _. | o  _|  _. _|_ o  _  ._  #}
{#  \/ (_| | | (_| (_|  |_ | (_) | | #}
{#                                   #}

  std::cout << "Elapsed time: " << elapsed_time << " s" << std::endl;
}

{# ___  ___      _        ______                _   _              #}
{# |  \/  |     (_)       |  ___|              | | (_)             #}
{# | .  . | __ _ _ _ __   | |_ _   _ _ __   ___| |_ _  ___  _ __   #}
{# | |\/| |/ _\` | | '_ \ |  _| | | | '_ \ / __| __| |/ _ \| '_ \  #}
{# | |  | | (_| | | | | | | | | |_| | | | | (__| |_| | (_) | | | | #}
{# \_|  |_/\__,_|_|_| |_| \_|  \__,_|_| |_|\___|\__|_|\___/|_| |_| #}
{#                                                                 #}

int main()
{
    test_{{name}}();
}

